<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>tech.edwardvan</groupId>
    <artifactId>tech-xyz</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <!--
        聚合(modules)和继承(parent)
            聚合主要是为了方便快速构建项目,继承主要是为了消除重复配置
            对于聚合模块而言,它知道有哪些被聚合的模块,但那些被聚合的模块不知道这个聚合模块的存在
            对于继承的父pom而言,它不知道有哪些子模块继承它,但那些子模块都必须知道自己的父POM是什么
    -->
    <modules>
        <!--java基础-->
        <module>base-java</module>
        <!--设计模式-->
        <module>base-design-pattern</module>
        <!--算法&数据结构-->
        <module>base-algorithm-structure</module>
        <!--并发-->
        <module>base-concurrent</module>
        <!--权限控制-->
        <module>rbac</module>
        <!--web xml版-->
        <module>web-ssm-xml</module>
        <!--web 注解版-->
        <module>web-ssm-annotation</module>
        <!--自定义starter-->
        <module>web-spring-boot-starter</module>
        <!--web spring boot版-->
        <module>web-spring-boot</module>
        <!--spring cloud全家桶-->
        <module>ms-spring-cloud</module>
        <!--源码解析-->
        <module>source-code-analysis</module>
        <!--mybatis-plus-->
        <module>os-mybatis-plus</module>
    </modules>
    <name>tech-xyz</name>

    <properties>
        <!-- https://start.spring.io/actuator/info -->
        
        <!-- https://spring.io/projects/spring-boot#learn -->
        <spring.boot.version>2.2.5.RELEASE</spring.boot.version>
        <!-- https://spring.io/projects/spring-cloud#learn -->
        <spring.cloud.version>Hoxton.SR3</spring.cloud.version>
        <!-- https://spring.io/projects/spring-cloud-alibaba#learn -->
        <spring.cloud.alibaba.version>2.1.0.RELEASE</spring.cloud.alibaba.version>
        <!-- https://mvnrepository.com/artifact/org.springframework.social/spring-social-core -->
        <spring.social.version>1.1.6.RELEASE</spring.social.version>
        <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
        <mybatis.version>3.5.4</mybatis.version>
        <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
        <mybatis.spring.version>2.0.4</mybatis.spring.version>
        <!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter -->
        <mybatis.spring.boot.version>2.1.2</mybatis.spring.boot.version>
        <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
        <druid.version>1.1.21</druid.version>
        <!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter -->
        <druid.spring.boot.version>1.1.21</druid.spring.boot.version>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 -->
        <commons.collections4.version>4.4</commons.collections4.version>
        <!--https://mvnrepository.com/artifact/org.logback-extensions/logback-ext-spring -->
        <logback.spring.version>0.1.5</logback.spring.version>
        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
        <swagger.version>2.9.2</swagger.version>
        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <guava.version>28.2-jre</guava.version>
        <!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter -->
        <mybatis.plus.version>3.3.1</mybatis.plus.version>
        <!-- https://mvnrepository.com/artifact/org.apache.velocity/velocity-engine-core -->
        <velocity.version>2.2</velocity.version>
    </properties>
    <!--
        只是对jar包版本进行管理,不会实际引入jar
        当<dependencies>元素中没有指明版本信息时,<dependencyManagement>中的<dependencies>元素才会起作用
    -->
    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring.cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.social</groupId>
                <artifactId>spring-social-security</artifactId>
                <version>${spring.social.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.social</groupId>
                <artifactId>spring-social-config</artifactId>
                <version>${spring.social.version}</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid.spring.boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.logback-extensions</groupId>
                <artifactId>logback-ext-spring</artifactId>
                <version>${logback.spring.version}</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!-- mybatis start -->
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis</artifactId>
                <version>${mybatis.version}</version>
            </dependency>

            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis.spring.version}</version>
            </dependency>
            <!-- mybatis end -->

            <!--mybatis-plus start-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis.plus.version}</version>
            </dependency>
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-generator</artifactId>
                <version>${mybatis.plus.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity-engine-core</artifactId>
                <version>${velocity.version}</version>
            </dependency>
            <!--mybatis-plus end-->

            <!-- swagger start-->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>${swagger.version}</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>${swagger.version}</version>
            </dependency>
            <!-- swagger end-->


            <!--util start-->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${commons.collections4.version}</version>
            </dependency>
            <!--util end-->
        </dependencies>
    </dependencyManagement>

    <!--
        依赖版本冲突的解决方法
            1.路径近者优先原则:如果依赖路径中有两个相同的jar包,那么选择路径短的那个包
            2.第一声明者优先原则:如果依赖路径中有两个相同的jar包,路径长度也相同,那么依赖写在前面的优先
            3.排除原则
                <exclusions>
                    <exclusion>
                      <groupId>xxx</groupId>
                      <artifactId>xxx</artifactId>
                    </exclusion>
                </exclusions>
            4.版本锁定:使用<dependencyManagement>约束版本
    -->
    <dependencies>
        <!--logback start -->
        <dependency>
            <groupId>org.logback-extensions</groupId>
            <artifactId>logback-ext-spring</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
        </dependency>
        <!--logback end -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!--解决没有web.xml文件打包报错的问题-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.3</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <!-- 源代码使用的JDK版本 -->
                    <source>11</source>
                    <!-- 需要生成的目标class文件的编译版本 -->
                    <target>11</target>
                    <!-- 字符集编码 -->
                    <encoding>UTF-8</encoding>
                    <!-- 跳过测试 -->
                    <!--<skip>true</skip>-->
                </configuration>
            </plugin>
            <!--单元测试插件(跳过单元测试,但是会继续编译)-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <!--是否跳过单元测试-->
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <repositories>
        <repository>
            <id>nexus-aliyun</id>
            <name>Nexus aliyun</name>
            <layout>default</layout>
            <url>http://maven.aliyun.com/nexus/content/groups/public</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <releases>
                <enabled>true</enabled>
            </releases>
        </repository>
    </repositories>
</project>
