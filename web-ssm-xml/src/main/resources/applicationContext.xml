<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
        概念
            IOC(控制反转)
                反转了创建对象的方式,从我们自己创建反转到了spring
            DI(依赖注入)
                实现IOC思想需要DI来支持
            AOP概念
                Joinpoint (连接点)
                    目标对象中所有可增强的方法
                Pointcut(切入点)
                    目标对象,想要增强的方法(假如我们要对save和delete方法加入增强方法,则save和delete 则为切入点)
                Advice(通知、增强)
                    增强的代码：System.out.println("打开事物");，System.out.println("提交事物");
                Target(目标对象)
                    被代理对象
                Weaving(织入)
                    将通知应用到切入点过程
                Proxy(代理)
                    将通知织入到目标对象之后 形成代理对象
                aspect(切面)
                    切入点+通知
    -->

    <!--扫描指定目录下子孙包中的所有类的注解-->
    <context:component-scan base-package="tech.edwardvan.webssmxml">
        <!--排除@Controller注解 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--加载配置文件-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>file:${CONFIG_PATH}dbConfig/web-ssm-xml.properties</value>
            </list>
        </property>
    </bean>

    <!--
        bean标签
                class属性:被管理对象的完整类名.
                name属性: 给被管理的对象起个名字.获得对象时根据该名称获得对象.可以重复.可以使用特殊字符.
                id属性: 与name属性一模一样.名称不可重复.不能使用特殊字符.
                    结论: 尽量使用name属性.
                scope属性:
                    singleton:默认值,单例
                    prototype:多例,每次获得时才会创建,每次创建都为新对象
                init-method属性:创建完对象马上执行的方法
                destroy-method属性:销毁对象马上执行的方法
     -->
    <bean name="student" class="tech.edwardvan.webssmxml.model.Student" scope="prototype" init-method="init" destroy-method="destory">
        <!--参数注入方式:set方法注入-->
        <property name="name" value="student1"/>
        <property name="dream">
            <list>
                <value>soldier</value>
                <value>scientist</value>
                <value>pilot</value>
            </list>
        </property>
        <property name="score">
            <map>
                <entry key="math" value="90"/>
                <entry key="english" value="85"/>
            </map>
        </property>
        <!--参数注入方式:构造函数注入(name表示参数名成,index表示参数位置,type表示参数类型)-->
        <constructor-arg index="0" type="java.lang.Integer" name="id" value="1"/>
    </bean>

    <!--创建对象方式: 2.静态工厂创建-->
    <bean name="student2" class="tech.edwardvan.webssmxml.model.Student" factory-method="staticFactory"></bean>
    <!--创建对象方式: 3.实例工厂-->
    <bean name="student3"  factory-bean="student" factory-method="instanceFactory"></bean>

    <!--AOP配置流程-->
    <!--1.配置目标对象-->
    <!--2.配置通知对象-->
    <bean name="springAdvice" class="tech.edwardvan.webssmxml.config.SpringAdvice"/>
    <aop:config>
        <!--3.配置切入点
               public String tech.edwardvan.webssmxml.model.Student.toString() Student类中toString方法
               String tech.edwardvan.webssmxml.model.Student.toString()  public可以去掉
               * tech.edwardvan.webssmxml.model.Student.toString() 返回值不做限制
               * tech.edwardvan.webssmxml.model.Student.*() Student类中所有的空参方法
               * tech.edwardvan.webssmxml.model.Student.*(..) Student类中所有的方法,对参数不做限制
               * tech.edwardvan.webssmxml.model.*t.*(..) tech.edwardvan.webssmxml.model包下以t结尾的类中所有的方法
               * tech.edwardvan.webssmxml..*t.*(..) tech.edwardvan.webssmxml包下(子孙包)以g结尾的类中所有的方法
           -->
        <aop:pointcut id="testAop" expression="execution(String tech.edwardvan.webssmxml.model.Student.toString())"/>
        <!--4.配置切面,通知对象织入目标对象-->
        <aop:aspect ref="springAdvice">
            <aop:before method="before" pointcut-ref="testAop"/>
            <aop:after method="after" pointcut-ref="testAop"/>
            <aop:after-returning method="afterReturning" pointcut-ref="testAop"/>
            <aop:around method="around" pointcut-ref="testAop"></aop:around>
            <aop:after-throwing method="afterThrowing" pointcut-ref="testAop"/>
        </aop:aspect>
    </aop:config>

    <!--数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

    <!-- 事务核心管理器,封装了所有事务操作. 依赖于连接池 -->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--配置事务属性-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--
                以方法为单位,指定方法应用什么事务属性
                isolation:隔离级别
                propagation:传播行为
                read-only:是否只读
            -->
            <tx:method name="save*" isolation="REPEATABLE_READ" />
            <tx:method name="persist*" isolation="REPEATABLE_READ" />
            <tx:method name="update*" isolation="REPEATABLE_READ"/>
            <tx:method name="modify*" isolation="REPEATABLE_READ" />
            <tx:method name="delete*" isolation="REPEATABLE_READ" />
            <tx:method name="remove*" isolation="REPEATABLE_READ" />
            <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
            <tx:method name="testTransactional" isolation="REPEATABLE_READ"/>
        </tx:attributes>
    </tx:advice>

    <!--事务切面配置-->
    <aop:config>
        <!-- 事务切点 -->
        <aop:pointcut id="txPc" expression="execution(void tech.edwardvan.webssmxml.service.impl.UserServiceImpl.testTransactional())"/>
        <!--
            配置切面 : 通知+切点
            advice-ref:通知的名称
            pointcut-ref:切点的名称
        -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPc"/>
    </aop:config>

    <!-- Mybatis核心配置 -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="mapperLocations" value="classpath:mappers/*.xml"></property>
    </bean>

    <!--Mybatis动态代理(扫描指定包及其子孙包,而且会自动寻找sqlSessionFactoryBean,不需要手动注入)-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="tech.edwardvan.webssmxml.dao"></property>
    </bean>

</beans>